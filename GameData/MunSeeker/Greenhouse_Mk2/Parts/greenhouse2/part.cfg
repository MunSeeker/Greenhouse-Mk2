PART
{
// Kerbal Space Program - Part Config
// 

// --- general parameters ---
name = MunSeeker_Greenhouse_Mk2
module = Part
author = MunSeeker

// --- asset parameters ---
scale = 0.01


// --- node definitions ---
node_stack_top = 0.0, 75.0, 0.0, 0.0, 1.0, 0.0
node_stack_bottom = 0.0, -76.0, 0.0, 0.0, 1.0, 0.0
node_attach = 0.0, 0.0, -51.0, 0.0, 0.0, 1.0, 1



// --- editor parameters ---
TechRequired = advConstruction
entryCost = 5500
cost = 2800
category = Utility
subcategory = 0
	title = MunSeeker Greenhouse Mk2 TAC
	manufacturer = MunSeeker's Artisanal Devices
	description = A small greenhouse designed for TAC life support. Converts Electricity (a lot), Waste, Carbon Dioxide and Waste Water to Food. There is some loss in this process, so the crew will still need to be supplied. One greenhouse will use 50% of the waste products of 3 Kerbals and supply them with 15% Oxygen, 30% Water and 40% Food of their total needs.

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,1,1,1,0

// --- standard part parameters ---
mass = 2.5
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.3
angularDrag = 2
crashTolerance = 20
breakingForce = 50
breakingTorque = 50
maxTemp = 3000
fuelCrossFeed = True


	MODEL 
	{
		model = Squad/Parts/FuelTank/MK1FuselageStructural/model
		scale = 0.8, 0.8, 0.8
		texture = model000, MunSeeker/Greenhouse_Mk2/Parts/greenhouse2/greenhouse_mk2_000
		texture = model001, MunSeeker/Greenhouse_Mk2/Parts/greenhouse2/greenhouse_mk2_001
	}


	MODULE
	{
		name = TacGenericConverter
		converterName = Greenhouse

		// Number of units to convert per day (24 hours)
		conversionRate = 3

		// A comma separated list of resources to use as inputs.
		// For each resource, list the resource name and the amount (which
		// is multiplied by the conversionRate)
		inputResources = CarbonDioxide, 0.5, WasteWater, 0.5, Waste, 0.5, ElectricCharge, 6000

		// A comma separated list of resources to output. Same as above
		// but also specify whether it should keep converting if the
		// resource is full (generating excess that will be thrown away).
		outputResources = Oxygen, 0.15, false, Water, 0.3, false, Food, 0.4, false
	}
	
	MODULE
	{
		name = ModuleScienceExperiment	

		experimentID = crewReport

		experimentActionName = Crew Report
		resetActionName = Discard Crew Report
		reviewActionName = Review Report

		useStaging = False	
		useActionGroups = True
		hideUIwhenUnavailable = True	
		rerunnable = True

		xmitDataScalar = 1.0
	}

	MODULE
	{
		name = ModuleConnectedLivingSpace
		passable = true
	}

	//-----------onboard resources-------------//

	RESOURCE
	{
		name = Food
		amount = 0
		maxAmount = 50
	}

	RESOURCE
	{
		name = Water
		amount = 0
		maxAmount = 50
	}

	RESOURCE
	{
		name = Oxygen
		amount = 0
		maxAmount = 50
	}

	RESOURCE
	{
		name = Waste
		amount = 8
		maxAmount = 12
	}

	RESOURCE
	{
		name = CarbonDioxide
		amount = 12
		maxAmount = 24
	}

	RESOURCE
	{
		name = WasteWater
		amount = 8
		maxAmount = 12
	}


}
